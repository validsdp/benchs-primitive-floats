# -*- mode: makefile; -*-

COQ_COMPILER := $(shell which coqc)

OUT := ./output
OUT_NATIVE := ./output_native

OPS := add mul none

VER := prim emul

TAC_VFILES := mat0050.v mat0100.v mat0150.v mat0200.v mat0250.v mat0300.v mat0350.v mat0400.v
OPS_VFILES := mat0200.v mat0250.v mat0300.v mat0350.v mat0400.v

TAC_VBENCHS := $(foreach ver,$(VER),$(foreach f,$(TAC_VFILES:.v=),$(foreach n,1 2 3 4 5,tac_$(ver)_$(f)_$(n).v)))
OPS_VBENCHS := $(foreach ver,$(VER),$(foreach f,$(OPS_VFILES:.v=),$(foreach o,$(OPS),$(foreach n,1 2 3 4 5,test_$(ver)_$(f)_$(o)_$(n).v))))

TAC_LOGBENCHS := $(addprefix $(OUT)/,$(TAC_VBENCHS:.v=.log))
TAC_LOGBENCHS_NATIVE := $(addprefix $(OUT_NATIVE)/,$(TAC_VBENCHS:.v=.log))
OPS_LOGBENCHS := $(addprefix $(OUT)/,$(OPS_VBENCHS:.v=.log))
OPS_LOGBENCHS_NATIVE := $(addprefix $(OUT_NATIVE)/,$(OPS_VBENCHS:.v=.log))

VBENCHS_ALL := $(addprefix $(OUT)/,$(TAC_VBENCHS)) $(addprefix $(OUT_NATIVE)/,$(OPS_VBENCHS))

benchs:: tac_benchs_vm tac_benchs_native ops_benchs_vm ops_benchs_native

tex:: tac_benchs.tex tac_benchs_native.tex ops_benchs.tex ops_benchs_native.tex

DRYRUN := output/tac_prim_mat0050_1.log output/tac_emul_mat0050_1.log \
  output_native/tac_prim_mat0050_1.log output_native/tac_emul_mat0050_1.log \
  output/test_prim_mat0050_none_1.log output/test_prim_mat0050_add_1.log \
  output/test_emul_mat0050_none_1.log output/test_emul_mat0050_add_1.log \
  output_native/test_prim_mat0050_none_1.log output_native/test_prim_mat0050_add_1.log \
  output_native/test_emul_mat0050_none_1.log output_native/test_emul_mat0050_add_1.log

dryrun:: $(DRYRUN)
	./tac_coqlog2tex.pl output/tac_prim_mat0050_1.log output/tac_emul_mat0050_1.log > tac_benchs0.tex
	./tac_coqlog2tex.pl output_native/tac_prim_mat0050_1.log output_native/tac_emul_mat0050_1.log | sed -e 's/vm_compute/native_compute/' > tac_benchs_native0.tex
	./ops_coqlog2tex.pl output/test_prim_mat0050_none_1.log output/test_prim_mat0050_add_1.log output/test_emul_mat0050_none_1.log output/test_emul_mat0050_add_1.log > ops_benchs0.tex
	./ops_coqlog2tex.pl output_native/test_prim_mat0050_none_1.log output_native/test_prim_mat0050_add_1.log output_native/test_emul_mat0050_none_1.log output_native/test_emul_mat0050_add_1.log | sed -e 's/vm_compute/native_compute/' > ops_benchs_native0.tex

tac_benchs_vm:: $(VOFILES) $(TAC_LOGBENCHS)
tac_benchs_native:: $(VOFILES) $(TAC_LOGBENCHS_NATIVE)
ops_benchs_vm:: $(VOFILES) $(OPS_LOGBENCHS)
ops_benchs_native:: $(OPS_LOGBENCHS_NATIVE)

tac_benchs.tex::
	./tac_coqlog2tex.pl $(TAC_LOGBENCHS) > $@
tac_benchs_native.tex::
	./tac_coqlog2tex.pl $(TAC_LOGBENCHS_NATIVE) | sed -e 's/vm_compute/native_compute/' > $@
ops_benchs.tex::
	./ops_coqlog2tex.pl $(OPS_LOGBENCHS) > $@
ops_benchs_native.tex::
	./ops_coqlog2tex.pl $(OPS_LOGBENCHS_NATIVE) | sed -e 's/vm_compute/native_compute/' > $@

$(OUT):
	mkdir -p -v $(OUT)

$(OUT)/tac_emul_%.v: | $(OUT)
	@arg="$*" && mat=$${arg%%_*} && \
	echo "\nBuilding $@" && \
	set -x && \
	sed -e 's/^.*EMULATED.*$$//; s/^.*DEFINITION.*$$//; s/^.*TEST.*$$/'"From FloatBench Require Import $$mat./" "$$mat.v" > $@

$(OUT)/tac_prim_%.v: | $(OUT)
	@arg="$*" && mat=$${arg%%_*} && \
	echo "\nBuilding $@" && \
	set -x && \
	sed -e 's/^.*PRIMITIVE.*$$//; s/^.*DEFINITION.*$$//; s/^.*TEST.*$$/'"From FloatBench Require Import $$mat./" "$$mat.v" > $@

$(OUT)/test_emul_%.v: test_emul.v | $(OUT)
	@arg="$*" && mat=$${arg%%_*} && op=$${arg%_*} && op=$${op##*_} && \
	echo "\nBuilding $@" && \
	set -x && \
	sed -e "s/§mat§/$$mat/; /$$op/{s/no_//}" $< > $@

$(OUT)/test_prim_%.v: test_prim.v | $(OUT)
	@arg="$*" && mat=$${arg%%_*} && op=$${arg%_*} && op=$${op##*_} && \
	echo "\nBuilding $@" && \
	set -x && \
	sed -e "s/§mat§/$$mat/; /$$op/{s/no_//}" $< > $@

# BEGIN Duplication :/
$(OUT_NATIVE):
	mkdir -p -v $(OUT_NATIVE)

$(OUT_NATIVE)/tac_emul_%.v: | $(OUT_NATIVE)
	@arg="$*" && mat=$${arg%%_*} && \
	echo "\nBuilding $@" && \
	set -x && \
	sed -e 's/Time posdef_check/Time posdef_check_native/; s/^.*EMULATED.*$$//; s/^.*DEFINITION.*$$//; s/^.*TEST.*$$/'"From FloatBench Require Import $$mat./" "$$mat.v" > $@

$(OUT_NATIVE)/tac_prim_%.v: | $(OUT_NATIVE)
	@arg="$*" && mat=$${arg%%_*} && \
	echo "\nBuilding $@" && \
	set -x && \
	sed -e 's/Time primitive_posdef_check/Time primitive_posdef_check_native/; s/^.*PRIMITIVE.*$$//; s/^.*DEFINITION.*$$//; s/^.*TEST.*$$/'"From FloatBench Require Import $$mat./" "$$mat.v" > $@

$(OUT_NATIVE)/test_emul_%.v: test_emul.v | $(OUT_NATIVE)
	@arg="$*" && mat=$${arg%%_*} && op=$${arg%_*} && op=$${op##*_} && \
	echo "\nBuilding $@" && \
	set -x && \
	sed -e "s/vm_compute/native_compute/; s/§mat§/$$mat/; /$$op/{s/no_//}" $< > $@

$(OUT_NATIVE)/test_prim_%.v: test_prim.v | $(OUT_NATIVE)
	@arg="$*" && mat=$${arg%%_*} && op=$${arg%_*} && op=$${op##*_} && \
	echo "\nBuilding $@" && \
	set -x && \
	sed -e "s/vm_compute/native_compute/; s/§mat§/$$mat/; /$$op/{s/no_//}" $< > $@
# END Duplication

%.log %.vo %.glob: %.v
	$(COQ_COMPILER) -native-compiler yes -R . FloatBench $< 2>&1 | tee $(<:.v=.log)

.SECONDARY: $(VBENCHS_ALL)

.INTERMEDIATE: $(VBENCHS_ALL:.v=.vo) $(VBENCHS_ALL:.v=.glob)

clean::
	$(RM) $(VBENCHS_ALL) $(VBENCHS_ALL:.v=.vo) $(VBENCHS_ALL:.v=.glob)

distclean:: clean
	$(RM) $(TAC_LOGBENCHS) $(TAC_LOGBENCHS_NATIVE) $(OPS_LOGBENCHS) $(OPS_LOGBENCHS_NATIVE)
